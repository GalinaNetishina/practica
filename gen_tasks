from random import randint, choice, sample
from string import Template
from functools import wraps
import math
from sympy import *
from IPython.display import display, Latex

class trig:
  __mode = 0

  def output(func):
    @wraps(func)
    def inner(*args):
      pattern, items, answer = func(*args)
      if trig.__mode:
        return Latex(f"{pattern.substitute(**items)}"), Latex(str(answer))
      return pattern.substitute(**items), answer
    return inner

  @output
  def rand():
    '''rand()->task: "вычислить значение выражения по известному tg или ctg, answer:int
    '''
    sin, cos = '\sin \\alpha', '\cos \\alpha'
    template_task = Template(f'Известно, что $known, Найдите $expression ')
    while True:
      tg = Rational(randint(1, 9), randint(1, 9))
      a, b, c, d = randint(1, 9), randint(1, 9), randint(1, 9), randint(1, 9)
      res = (a*tg + b) / (c*tg + d)
      if abs(res) - int(abs(res)) < 0.01:
        break
    exp1 = f"$\\frac{{{a if a!=1 else ''}{sin}+{b if b!=1 else ''}{cos}}}{{{c if c!=1 else ''}{sin}+{d if d!=1 else ''}{cos}}}$"
    display(Latex(exp1))
    items={'expression':exp1, 'known':choice([r"$\\tg \alpha = "+f"{latex(tg)}$", r"$\\ctg \alpha = "+f"{latex(1/tg)}$"])}
    return template_task, items, res


  @output
  def task_float(known='tg'):
    '''task_float(known)->task: "вычислить значение выражения по известному tg или ctg, answer:float
    '''
    if known not in ['tg', 'ctg']:
      raise Exception(f'unsupported known function')
    template_task = Template(f'Известно, что $$\\\{known} \\alpha=$known $$, Найдите $expr')
    
    answer_num = randint(1, 10)
    num_tg, den_tg = sample(list(range(1, 10)), 2)
    left, right = '\sin \\alpha', '\cos \\alpha'
    if known=='ctg':
      left, right = right, left
    value = Rational(num_tg, den_tg)
    denom = randint(1, 10)*2
    num = denom*answer_num//2
    def _part(goal, value):
      part1 = den_tg*randint(1, 3)
      part2 = goal - part1*value
      #print(f"{part1}*{value}{'+'*bool(part2>0)}{part2}={goal}" if part2 else "еще попытка")
      return (part1, part2) if part2 else _part(goal, value)
    top = _part(num, value)
    bottom = _part(denom, value)
    #print('tg=',value, 'answer=', answer_num/2)
    assert (top[0]*value+top[1]) / (bottom[0]*value + bottom[1]) == answer_num/2
    expr = f"""$\\frac{{{top[0] if abs(top[0]) != 1 else ''}{left}{'+' if (top[1]>0) else''}{top[1] if abs(top[1]) != 1 else '-' if top[1]<0 else ''}\
    {right}}}{{{bottom[0] if abs(bottom[0]) != 1 else ''}{left}{'+' if (bottom[1]>0) else''}{bottom[1] if abs(bottom[1]) != 1 else '-' if bottom[1]<0 else ''}{right}}}$"""
    #display(Latex(expr))
    return template_task, {'expr':expr, 'known': latex(value)}, answer_num / 2

  @output
  def task_int(known='tg'):
    '''task_float(known)->task: "вычислить значение выражения по известному tg или ctg, answer:int
    '''
    if known not in ['tg', 'ctg']:
      raise Exception(f'unsupported known function')
    template_task = Template(f'Известно, что $$\\\{known} \\alpha=$known $$, Найдите $expr')
    answer = randint(1, 9)
    num_tg, den_tg = sample(list(range(1, 10)), 2)
    left, right = '\sin \\alpha', '\cos \\alpha'
    value = Rational(num_tg, den_tg)
    denom = randint(1, 10)
    num = denom*answer
    def _part(goal, value):
      part1 = den_tg*randint(1, 3)
      part2 = goal - part1*value
      #print(f"{part1}*{value}{'+'*bool(part2>0)}{part2}={goal}")
      return (part1, part2) if part2 else _part(goal, value)
    top = _part(num, value)
    bottom = _part(denom, value)
    #print('tg=',value, 'answer=', answer)
    assert (top[0]*value+top[1]) / (bottom[0]*value + bottom[1]) == answer
    expr = f"$\\frac{{{top[0] if abs(top[0]) != 1 else ''}{left}{'+' if (top[1]>0) else''}{top[1] if abs(top[1]) != 1 else '-' if top[1]<0 else ''}\
    {right}}}{{{bottom[0] if abs(bottom[0]) != 1 else ''}{left}{'+' if (bottom[1]>0) else''}{bottom[1] if abs(bottom[1]) != 1 else '-' if bottom[1]<0 else ''}{right}}}$"
  
    #display(Latex(task))
    return template_task, {'expr':expr, 'known': latex(value)}, answer

  def _get_items(radian, answer_100, target, known):
      segment_q = lambda x: latex(UnevaluatedExpr(S.One*pi*(math.floor(x*2/pi))/2)) + ", " + latex(UnevaluatedExpr(S.One*pi*(math.floor(x*2/pi)+1)/2))
      target_ =' \\' * target.endswith('g') + target
      known_ = '\\' * known.endswith('g')+known
      f1 = lambda func: f'{"-" if func(radian)<0 else ""}' + latex(sqrt(10000-answer_100*answer_100)/100)
      f2 = lambda func: latex(sqrt(10000-answer_100*answer_100)/answer_100*(-1 if func(radian)<0 else 1))
      f3 = lambda func: latex(answer_100 / sqrt(10000-answer_100*answer_100)*(-1 if func(radian)<0 else 1))
      f4 = lambda func: latex(answer_100*sqrt(10000 + answer_100*answer_100)/(10000 + answer_100*answer_100)*(-1 if func(radian)<0 else 1))
      f5 = lambda func: f'{"-" if func(radian)<0 else ""}'+latex(sqrt(10000 + answer_100*answer_100)/(10000 + answer_100*answer_100)*100)
      f6 = lambda: latex(Rational(100, answer_100))

      values = {
        'cos': {'sin': f1(sin),  'tg': f2(sin), 'ctg': f3(sin)},
        'sin': {'cos': f1(cos), 'ctg': f2(cos),  'tg': f3(cos)},
        'ctg': {'cos': f4(sin), 'sin': f5(sin),  'tg': f6()},
         'tg': {'sin': f4(cos), 'cos': f5(cos), 'ctg': f6()}
      }
      return {'goal': target_, 'known': known_, 'value': values[target][known], 'segment': segment_q(radian)}

  @output
  def identity(target_known='sin-cos'):
    '''identity('target-known')-> "Вычислить target α, если known α = ... и α ∈ [..., ...]", answer: float
    '''
    template_task = Template(f'Вычислить $$ \$goal \\alpha $$, если $$ \$known \\alpha = $value$$\
    и  $$ \\alpha \\in [$segment] $$')
    target, known = target_known.split("-")
    target_func = {
      'cos': cos,
      'sin': sin,
      'tg': tan,
      'ctg': lambda x: 1/tan(x)
    }.get(target)

    if target_func is None:
      raise Exception(f'unsupported target function')

    while True:
      radian = randint(-20,20)
      answer_100 = randint(-100,100)
      if target.endswith('g'):
        answer_100*=10
      try:
        if target_func(radian)*answer_100 > 0:
          break
      except:
        pass

    items = trig._get_items(radian, answer_100, target, known)
    return template_task, items, answer_100/100
